<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.obo.mapper.VolunteerMapper">
	
	<!-- 회원용 봉사 모집 목록 확인 지금 날짜보다 봉사 날짜가 뒤인 경우를 우선 정렬.-->
	<select id="selectVolunteerNList" resultType="java.util.Map" parameterType="java.util.Map">
	SELECT * FROM volunteer_list
		<where>
			<if test="searchWord != null">
				AND shelterName LIKE CONCAT('%',#{searchWord},'%')
			</if>
			<if test="categoryName != null">
				AND categoryName = #{categoryName}
			</if>
		</where>
		ORDER BY 
			CASE WHEN volunteerDate > NOW() THEN 0
			ELSE 1 END, volunteerDate
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 회원용 봉사 모집 총 -->
	<select id="selectVolunteerNTotal" resultType="int" parameterType="java.util.Map">
		SELECT COUNT(*) FROM volunteer_recruit vr
			JOIN staff s ON vr.staff_id = s.staff_id
			JOIN shelter sh ON s.shelter_id = sh.shelter_id
			JOIN volunteer_category vc ON vr.volunteer_category_id = vc.volunteer_category_id
		<where>
			<if test="searchWord != null">
				AND sh.shelter_name LIKE CONCAT('%',#{searchWord},'%')
			</if>
			<if test="categoryName != null">
				AND vc.volunteer_category_name = #{categoryName}
			</if>
		</where>
	</select>
	
	<!-- 봉사 카테고리 받아오기 -->
	<select id="selectVolunteerCategory" resultType="String">
		SELECT volunteer_category_name categoryName FROM volunteer_category
	</select>
	
	<!-- 회원 일반 봉사 신청 -->
	<insert id="insertVolunteerApplyByMember" parameterType="java.util.Map" >
		INSERT INTO volunteer_apply(volunteer_recruit_id, member_id, apply_date) VALUES (#{recruitId}, #{memberId}, NOW())
	</insert>
	
	<!-- 회원 일반 봉사 중복 검사 -->
	<select id="selectMemberIdForCheckApplying" resultType="String" parameterType="java.util.Map">
		SELECT member_id memberId FROM volunteer_apply WHERE volunteer_recruit_id=#{recruitId} AND member_id=#{memberId}
	</select>
	
	<!-- 회원 일반 봉사 자격 검사 -->
	<select id="selectMemberQualification" resultType="String" parameterType="java.util.Map">
		SELECT qa.qualification_volunteer_application_id FROM qualification_approval qa 
			JOIN qualification_volunteer_application qva ON qva.qualification_volunteer_application_id = qa.qualification_volunteer_application_id
			JOIN member m ON m.member_id = qva.member_id
			JOIN volunteer_category vc ON qva.volunteer_category_id = vc.volunteer_category_id
		<where>
			AND m.member_id=#{memberId} AND qa.approval_check='Y' AND vc.volunteer_category_name=#{categoryName}
		</where>
	</select>
	
	<!-- 회원 정기봉사 목록 -->
	<select id="selectVolunteerPList" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT * FROM periodically_volunteer_list
				<where>
			<if test="searchWord != null">
				AND shelterName LIKE CONCAT('%',#{searchWord},'%')
			</if>
			<if test="categoryName != null">
				AND categoryName = #{categoryName}
			</if>
		</where>
		ORDER BY 
			CASE WHEN startDate > NOW() THEN 0
			ELSE 1 END, startDate
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 회원용 정기 봉사 모집 총 -->
	<select id="selectVolunteerPTotal" resultType="int" parameterType="java.util.Map">
		SELECT COUNT(*) FROM periodically_volunteer_recruit pvr
			JOIN staff s ON pvr.staff_id = s.staff_id
			JOIN shelter sh ON s.shelter_id = sh.shelter_id
			JOIN volunteer_category vc ON pvr.volunteer_category_id = vc.volunteer_category_id
		<where>
			<if test="searchWord != null">
				AND sh.shelter_name LIKE CONCAT('%',#{searchWord},'%')
			</if>
			<if test="categoryName != null">
				AND vc.volunteer_category_name = #{categoryName}
			</if>
		</where>
	</select>
	
	<!-- 회원 정기 봉사 신청 -->
	<insert id="insertPeriocallyVolunteerApplyByMember" parameterType="java.util.Map" >
		INSERT INTO periodically_volunteer_apply(periodically_volunteer_recruit_id, member_id, apply_date, determination) VALUES (#{recruitId}, #{memberId}, NOW(), #{determination})
	</insert>
	
	<!-- 회원 정기 봉사 중복 검사 -->
	<select id="selectMemberIdForCheckApplyingP" resultType="String" parameterType="java.util.Map">
		SELECT member_id memberId FROM periodically_volunteer_apply WHERE periodically_volunteer_recruit_id=#{recruitId} AND member_id=#{memberId}
	</select>
	
	<!-- 내정보 총 봉사 내역 -->
	<select id="selectFullVolunteerListByMember" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT COUNT(*)over() cnt, memberId, volunteerDate, shelterName, categoryName, volunteerTime FROM full_volunteer_check_list 
		WHERE memberId=#{memberId} ORDER BY volunteerDate DESC LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 내정보 총 봉사 시간 -->
	<select id="selectTotalVolunteerTimeByMember" resultType="int" parameterType="String">
		SELECT SUM(volunteerTime) FROM full_volunteer_check_list WHERE memberId=#{memberId}
	</select>
	
	<!-- 내정보 일반 봉사 신청 내역 -->
	<select id="selectVolunteerApplyListByMember" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT COUNT(*)over() cnt, applyId, volunteerDate, shelterName, categoryName FROM volunteer_apply_list
		WHERE memberId=#{memberId} ORDER BY volunteerDate DESC LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 내정보 정기 봉사 전체 내역(신청, 봉사완료) -->
	<select id="selectVolunteerPListByMember" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT COUNT(*)over() cnt, applyId, volunteerDate, shelterName, categoryName, state FROM member_periodically_volunteer_list
		WHERE memberId=#{memberId} ORDER BY state, volunteerDate DESC LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 내정보 일반 봉사 신청 취소 -->
	<delete id="deleteVolunteerApplyByMember" parameterType="java.util.Map">
		DELETE FROM volunteer_apply WHERE member_id=#{memberId} AND volunteer_apply_id=#{applyId}
	</delete>
	
	<!-- 내정보 정기 봉사 신청 취소 -->
	<delete id="deleteVolunteerPByMember" parameterType="java.util.Map">
		DELETE FROM periodically_volunteer_apply WHERE member_id=#{memberId} AND periodically_volunteer_apply_id=#{applyId}
	</delete>
	
	<!-- 내정보 봉사 달력(이번달만) -->
	<select id="selectVolunteerCalByMember" resultType="java.util.Map" parameterType="String">
		SELECT volunteerDate volunteerDate,YEAR(volunteerDate) yyyy, MONTH(volunteerDate)mm, DAY(volunteerDate)dd, shelterName, categoryName
				FROM volunteer_apply_list
		WHERE memberId=#{memberId} AND MONTH(volunteerDate)=MONTH(NOW()) AND DATEDIFF(volunteerDate, NOW())>=0
	</select>
	<!-- 내정보 봉사 달력 정기용 -->
	<select id="selectVolunteerPCalByMember" resultType="java.util.Map" parameterType="String">
		SELECT LEFT(pvr.periodically_volunteer_start_date, 10) startDate, DAY(pvr.periodically_volunteer_start_date) dd, YEAR(pvr.periodically_volunteer_start_date) yyyy,
			MONTH(pvr.periodically_volunteer_start_date) mm, pva.member_id memberId, pvr.volunteer_cycle volunteerCycle, sh.shelter_name shelterName, vc.volunteer_category_name categoryName 
			FROM periodically_volunteer_apply pva 
			JOIN periodically_volunteer_recruit pvr ON pva.periodically_volunteer_recruit_id=pvr.periodically_volunteer_recruit_id
			JOIN staff s ON s.staff_id = pvr.staff_id
			JOIN shelter sh ON sh.shelter_id=s.shelter_id
			JOIN volunteer_category vc ON pvr.volunteer_category_id = vc.volunteer_category_id
			LEFT JOIN periodically_volunteer_check pvc ON pvc.periodically_volunteer_apply_id=pva.periodically_volunteer_apply_id
		WHERE member_id=#{memberId} AND pvc.periodically_volunteer_apply_id IS null
	</select>
	
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ staff @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	
	<!-- 일반봉사 모집공고 volunteer recruit 리스트 -->
	<select id="selectVolunteerRecruitListInStaff" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			vr.volunteer_recruit_id AS volunteerRecruitId,
			vr.staff_id AS staffId,
			vc.volunteer_category_id AS volunteerCategoryId,
			vc.volunteer_category_name AS volunteerCategoryName,
			DATE(vr.volunteer_date) AS volunteerDate,
			vr.recruit_count AS recruitCount,
			COUNT(va.volunteer_recruit_id) AS applyCount,
			DATE(vr.register_date) AS registerDate,
			vr.volunteer_title AS volunteerTitle,
			COUNT(vr.volunteer_recruit_id) over() AS totalRow
		FROM volunteer_recruit AS vr
		LEFT JOIN volunteer_category AS vc ON vr.volunteer_category_id = vc.volunteer_category_id
		LEFT JOIN staff AS s ON vr.staff_id = s.staff_id
		LEFT JOIN volunteer_apply AS va ON va.volunteer_recruit_id = vr.volunteer_recruit_id
		<where>
			s.shelter_id = #{shelterId}
			<if test="searchWord != null and searchSelect == 'title'">
				AND vr.volunteer_title LIKE CONCAT('%', #{searchWord}, '%')
			</if>
			<if test="searchWord != null and searchSelect == 'staffId'">
				AND vr.staff_id LIKE CONCAT('%', #{searchWord}, '%')
			</if>
			<if test="categoryName != null">
				AND vc.volunteer_category_name = #{categoryName}
			</if>
		</where>
		GROUP BY vr.volunteer_recruit_id
		ORDER BY volunteerDate ASC, registerDate DESC
		LIMIT #{beginRow}, #{rowPerPage};
	</select>
	
	<!-- 일반봉사 신청목록 volunteer apply 리스트 -->
	<select id="selectVolunteerApplyListInStaff" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			va.volunteer_apply_id AS volunteerApplyId,
			va.volunteer_recruit_id AS volunteerRecruitId,
			m.member_name AS memberName,
			m.member_id AS memberId,
			vr.volunteer_title AS volunteerTitle,
			vc.volunteer_category_name AS volunteerCategoryName,
			DATE(va.apply_date) AS applyDate,
			DATE(vr.volunteer_date) AS volunteerDate,
			COUNT(va.volunteer_apply_id) over() AS totalRow
		FROM volunteer_apply AS va, volunteer_recruit AS vr, volunteer_category AS vc, staff AS s, member AS m
		<where>
			vr.volunteer_category_id = vc.volunteer_category_id
			AND va.volunteer_recruit_id = vr.volunteer_recruit_id
			AND va.member_id = m.member_id
			AND vr.staff_id = s.staff_id
			AND s.shelter_id = #{shelterId}
			AND va.volunteer_apply_id NOT IN (SELECT volunteer_apply_id FROM volunteer_check)
			<if test="searchWord != null and searchSelect == 'title'">
				AND vr.volunteer_title LIKE CONCAT('%', #{searchWord}, '%')
			</if>
			<if test="searchWord != null and searchSelect == 'member'">
				AND (m.member_name LIKE CONCAT('%', #{searchWord}, '%') OR m.member_id LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
		</where>
		ORDER BY volunteerDate ASC
		LIMIT #{beginRow}, #{rowPerPage};
	</select>
	
	<!-- 일반봉사 확인목록 volunteer check 리스트 -->
	<select id="selectVolunteerCheckListInStaff" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			va.volunteer_apply_id AS volunteerApplyId,
			m.member_name AS memberName,
			m.member_id AS memberId,
			vc.volunteer_category_name AS volunteerCategoryName,
			vr.volunteer_title AS volunteerTitle,
			DATE_FORMAT(vck.start_time, '%H:%i') AS startTime,
			DATE_FORMAT(vck.end_time, '%H:%i') AS endTime,
			DATE_FORMAT(vck.end_time,'%H:%i')-DATE_FORMAT(vck.start_time,'%H:%i') AS volunteerTime,
			DATE(vr.volunteer_date) AS volunteerDate,
			DATE(vck.check_date) AS checkDate,
			vck.staff_id_check AS staffId,
			COUNT(va.volunteer_apply_id) over() AS totalRow
		FROM volunteer_check AS vck, volunteer_apply AS va, volunteer_recruit AS vr, volunteer_category AS vc, staff AS s, member AS m
		<where>
			vck.volunteer_apply_id = va.volunteer_apply_id
			AND va.volunteer_recruit_id = vr.volunteer_recruit_id
			AND vr.volunteer_category_id = vc.volunteer_category_id
			AND va.member_id = m.member_id
			AND vck.staff_id_check = s.staff_id
			AND s.shelter_id = #{shelterId}
			<if test="searchWord != null and searchSelect == 'member'">
				AND (m.member_name LIKE CONCAT('%', #{searchWord}, '%') OR m.member_id LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
			<if test="categoryName != null">
				AND vc.volunteer_category_name = #{categoryName}
			</if>
		</where>
		ORDER BY volunteerDate DESC
		LIMIT #{beginRow}, #{rowPerPage};
	</select>
	
	<!-- 정기봉사 모집공고 period- volunteer recruit리스트 -->
	<select id="selectPeriodVolunteerRecruitListInStaff" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			vc.volunteer_category_id AS volunteerCategoryId,
			vc.volunteer_category_name AS volunteerCategoryName,
			pvr.title AS title,
			pvr.recruit_count AS recruitCount,
			COUNT(pva.periodically_volunteer_apply_id) AS applyCount,
			DATE(pvr.periodically_volunteer_start_date) AS startDate,
			DATE(pvr.register_date) AS registerDate,
			pvr.volunteer_cycle AS volunteerCycle,
			pvr.staff_id AS staffId,
			COUNT(pvr.periodically_volunteer_recruit_id) over() AS totalRow
		FROM periodically_volunteer_recruit AS pvr
		LEFT JOIN volunteer_category AS vc ON pvr.volunteer_category_id = vc.volunteer_category_id
		LEFT JOIN staff AS s ON pvr.staff_id = s.staff_id
		LEFT JOIN periodically_volunteer_apply AS pva ON pva.periodically_volunteer_recruit_id = pvr.periodically_volunteer_recruit_id
		<where>
			s.shelter_id = #{shelterId}
			<if test="searchWord != null and searchSelect == 'title'">
				AND pvr.title LIKE CONCAT('%', #{searchWord}, '%')
			</if>
			<if test="searchWord != null and searchSelect == 'staffId'">
				AND pvr.staff_id LIKE CONCAT('%', #{searchWord}, '%')
			</if>
			<if test="categoryName != null">
				AND vc.volunteer_category_name = #{categoryName}
			</if>
		</where>
		GROUP BY pvr.periodically_volunteer_recruit_id
		ORDER BY registerDate DESC
		LIMIT #{beginRow}, #{rowPerPage};
	</select>
	
	<!-- 정기봉사 신청목록 period- volunteer apply 리스트 -->
	<select id="selectPeriodVolunteerApplyListInStaff" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			m.member_name AS memberName,
			m.member_id AS memberId,
			pva.determination AS determination,
			pvr.title AS title,
			vc.volunteer_category_name AS volunteerCategoryName,
			pvr.volunteer_cycle AS volunteerCycle,
			pva.periodically_volunteer_apply_id AS periodVolunteerApplyId,
			pva.periodically_volunteer_recruit_id AS periodVolunteerRecruitId,
			DATE(pva.apply_date) AS applyDate,
			COUNT(pva.periodically_volunteer_apply_id) over() AS totalRow
		FROM periodically_volunteer_apply AS pva, periodically_volunteer_recruit AS pvr,
		volunteer_category AS vc, member AS m, staff AS s
		<where> 
			pva.periodically_volunteer_recruit_id = pvr.periodically_volunteer_recruit_id
			AND pvr.volunteer_category_id = vc.volunteer_category_id
			AND pva.member_id = m.member_id
			AND pvr.staff_id = s.staff_id
			AND s.shelter_id = #{shelterId}
			<if test="searchWord != null and searchSelect == 'title'">
				AND pvr.title LIKE CONCAT('%', #{searchWord}, '%')
			</if>
			<if test="searchWord != null and searchSelect == 'member'">
				AND (m.member_name LIKE CONCAT('%', #{searchWord}, '%') OR m.member_id LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
		</where>
		ORDER BY applyDate DESC
		LIMIT #{beginRow}, #{rowPerPage};
	</select>
	
	<!-- 정기봉사 확인목록 period- volunteer check리스트 -->
	<select id="selectPeriodVolunteerCheckListInStaff" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			m.member_name AS memberName,
			m.member_id AS memberId,
			vc.volunteer_category_name AS volunteerCategoryName,
			pvr.title AS title,
			DATE(pvc.volunteer_date) AS volunteerDate,
			DATE(pvc.check_date) AS checkDate,
			DATE_FORMAT(pvc.end_time,'%H:%i')-DATE_FORMAT(pvc.start_time,'%H:%i') AS volunteerTime,
			pvc.staff_id_check AS staffId,
			pvc.periodically_volunteer_apply_id AS periodVolunteerApplyId,
			COUNT(pva.periodically_volunteer_apply_id) over() AS totalRow
		FROM periodically_volunteer_check AS pvc, periodically_volunteer_apply AS pva,
			periodically_volunteer_recruit AS pvr, staff AS s, member AS m, volunteer_category AS vc
		<where>
			pvc.periodically_volunteer_apply_id = pva.periodically_volunteer_apply_id
			AND pva.periodically_volunteer_recruit_id = pvr.periodically_volunteer_recruit_id
			AND vc.volunteer_category_id = pvr.volunteer_category_id
			AND pvc.staff_id_check = s.staff_id
			AND pva.member_id = m.member_id
			AND s.shelter_id = #{shelterId}
			<if test="searchWord != null and searchSelect == 'member'">
				AND (m.member_name LIKE CONCAT('%', #{searchWord}, '%') OR m.member_id LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
			<if test="categoryName != null">
				AND vc.volunteer_category_name = #{categoryName}
			</if>
		</where>
		ORDER BY volunteerDate DESC
		LIMIT #{beginRow}, #{rowPerPage};
	</select>
	
	<!-- 위에있는건 name만 받아와서 id까지 받는걸로 하나 더 만들었음 -->
	<select id="selectVolunteerCategoryList" resultType="java.util.Map">
		SELECT 
			volunteer_category_id AS categoryId,
			volunteer_category_name AS categoryName
		FROM volunteer_category
	</select>
	
	<!-- 일반봉사 모집공고 한개 불러오기 -->
	<select id="selectVolunteerRecruitOne" parameterType="int" resultType="java.util.Map">
		SELECT
			vc.volunteer_category_name AS volunteerCategoryName,
			DATE(vr.volunteer_date) AS volunteerDate,
			vr.recruit_count AS recruitCount,
			COUNT(va.volunteer_recruit_id) AS applyCount
		FROM volunteer_recruit AS vr
		LEFT JOIN volunteer_category AS vc ON vr.volunteer_category_id = vc.volunteer_category_id
		LEFT JOIN volunteer_apply AS va ON va.volunteer_recruit_id = vr.volunteer_recruit_id
		WHERE vr.volunteer_recruit_id = #{volunteerRecruitId}
		GROUP BY va.volunteer_recruit_id;
	</select>
	
	<!-- 정기봉사 모집공고 한개 불러오기 -->
	<select id="selectPeriodVolunteerRecruitOne" parameterType="int" resultType="java.util.Map">
		SELECT
			vc.volunteer_category_name AS volunteerCategoryName,
			pvr.recruit_count AS recruitCount,
			COUNT(pva.periodically_volunteer_apply_id) AS applyCount,
			pvr.volunteer_cycle AS volunteerCycle
		FROM periodically_volunteer_recruit AS pvr
		LEFT JOIN volunteer_category AS vc ON pvr.volunteer_category_id = vc.volunteer_category_id
		LEFT JOIN periodically_volunteer_apply AS pva ON pva.periodically_volunteer_recruit_id = pvr.periodically_volunteer_recruit_id
		WHERE pvr.periodically_volunteer_recruit_id = #{periodVolunteerRecruitId}
		GROUP BY pvr.periodically_volunteer_recruit_id;
	</select>
	
	<!-- 일반봉사 모집공고 등록 -->
	<insert id="insertVolunteerRecruit" parameterType="com.gd.obo.vo.VolunteerRecruit">
		INSERT INTO volunteer_recruit(
			staff_id,
			volunteer_category_id,
			volunteer_date,
			recruit_count,
			register_date,
			volunteer_title
		) VALUE(
			#{staffId},
			#{volunteerCategoryId},
			#{volunteerDate},
			#{recruitCount},
			NOW(),
			#{volunteerTitle}
		)	
	</insert>
	
	<!-- 정기봉사 모집공고 등록 -->
	<insert id="insertPeriodVolunteerRecruit" parameterType="com.gd.obo.vo.PeriodVolunteerRecruit">
		INSERT INTO periodically_volunteer_recruit(
			staff_id,
			volunteer_category_id,
			periodically_volunteer_start_date,
			recruit_count,
			register_date,
			title,
			volunteer_cycle
		) VALUE(
			#{staffId},
			#{volunteerCategoryId},
			#{periodVolunteerStartDate},
			#{recruitCount},
			NOW(),
			#{title},
			#{volunteerCyle}
		)	
	</insert>
	
	<!-- 일반봉사 확인완료 -->
	<insert id="insertVolunteerCheck" parameterType="com.gd.obo.vo.VolunteerCheck">
		INSERT INTO volunteer_check(
			volunteer_apply_id,
			staff_id_check,
			start_time,
			end_time,
			check_date
		) VALUE(
			#{volunteerApplyId},
			#{staffId},
			#{startTime},
			#{endTime},
			NOW()
		)	
	</insert>
	
	<!-- 정기봉사 확인완료 -->
	<insert id="insertPeriodVolunteerCheck" parameterType="com.gd.obo.vo.PeriodVolunteerCheck">
		INSERT INTO periodically_volunteer_check(
			periodically_volunteer_apply_id,
			staff_id_check,
			volunteer_date,
			start_time,
			end_time,
			check_date
		) VALUE(
			#{periodVolunteerApplyId},
			#{staffId},
			#{volunteerDate},
			#{startTime},
			#{endTime},
			NOW()
		)	
	</insert>
	
</mapper>